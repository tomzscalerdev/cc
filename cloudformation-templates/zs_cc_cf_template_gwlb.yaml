AWSTemplateFormatVersion: 2010-09-09
Description: Zscaler Cloud Connector Add-on Template with Gateway Load Balancer (GWLB) v.1.3.3
Metadata:
  LICENSE: 'Apache License, Version 2.0'
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Cloud Connector Instances
        Parameters:
          - Ec2Instances
          - Ec2InstancesHttpProbePort
          - GwlbTargetGroupRebalanceOnDeregistrationOrUnhealthy
          - GwlbFlowStickiness
          - GwlbCrossZoneLbEnabled

    ParameterLabels:
      Ec2Instances:
        default: Cloud Connector Instance IDs
      Ec2InstancesHttpProbePort:
        default: Cloud Connector Instance HTTP Probe Port
      GwlbCrossZoneLbEnabled:
        default: Enable Cross-Zone Load Balancing
      GwlbTargetGroupRebalanceOnDeregistrationOrUnhealthy:
        default: GWLB Target Failover Rebalance Strategy
      GwlbFlowStickiness:
        default: GWLB Flow Stickiness Strategy
  cfn-lint:
    config:
      ignore_checks:
        - E9007
        - W2001
        - E3003
        - E2523
        - E3014 # subnet mappings inputted from macro transform
Transform:
  - Name: ZSCC-Macro
    Parameters:
      operation : ZSCCGWLB
Parameters:
  Ec2Instances:
    Type: List<AWS::EC2::Instance::Id>
    Description: >-
      AWS EC2 Instance IDs for Zscaler Cloud Connectors to add to the GWLB Target Group
  Ec2InstancesHttpProbePort:
    Type: String
    AllowedPattern: >-
      ^(80|102[4-9]|10[3-9]\d|1[1-9]\d{2}|[2-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$
    ConstraintDescription: 'The HTTP probe port''s allowed values are [80, 1024-65535]'
    Description: >-
      The HTTP Health Check Probe Port. Allowed values are [80, 1024-65535]. This MUST match what was configured in the deployment stack.
  GwlbCrossZoneLbEnabled:
    Type: String
    Description: "Select \"true\" to enable cross-zone load balancing (default), else \"false\" to disable"
    Default: true
    AllowedValues:
      - true
      - false
  GwlbTargetGroupRebalanceOnDeregistrationOrUnhealthy:
    Type: String
    Description: "Select \"rebalance\" to enable rebalance failover on target deregistration or if target becomes unhealthy"
    AllowedValues:
      - no_rebalance
      - rebalance
    Default: rebalance
  GwlbFlowStickiness:
    Type: String
    Description: >-
      Select 2-tuple for source_ip_dest_ip, 3-tuple for source_ip_dest_ip_proto flow stickiness
    Default: "5-tuple"
    AllowedValues:
      - "5-tuple"
      - "2-tuple"
      - "3-tuple"

Conditions:
  EnableFlowStickiness: !Not
    - !Equals
        - !Ref GwlbFlowStickiness
        - "5-tuple"
  Use3TupleFlowStickiness: !Equals
    - !Ref GwlbFlowStickiness
    - "3-tuple"


Resources:
  ZSCCGWLBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckPath: /?cchealth
      HealthCheckPort: !Ref Ec2InstancesHttpProbePort
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

      Name: !Join
        - "-"
        - - ZSCCGWLBTargetGroup
          - !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Port: 6081
      Protocol: GENEVE
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 0
        - Key: target_failover.on_deregistration
          Value: !Ref GwlbTargetGroupRebalanceOnDeregistrationOrUnhealthy
        - Key: target_failover.on_unhealthy
          Value: !Ref GwlbTargetGroupRebalanceOnDeregistrationOrUnhealthy
        - Key: stickiness.enabled
          Value: !If
            - EnableFlowStickiness
            - true
            - false
        - Key: stickiness.type
          Value: !If
            - Use3TupleFlowStickiness
            - "source_ip_dest_ip_proto"
            - "source_ip_dest_ip"

  ZSCCGWLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ZSCCGWLBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ZSCCGWLB
  ZSCCVPCEPService:
    Type: 'AWS::EC2::VPCEndpointService'
    Properties:
      AcceptanceRequired: false
      GatewayLoadBalancerArns:
        - !Ref ZSCCGWLB
  ZSCCVPCEP:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      ServiceName: !Join
        - .
        - - com.amazonaws.vpce
          - !Ref AWS::Region
          - !Ref ZSCCVPCEPService
      VpcEndpointType: GatewayLoadBalancer
  ZSCCGWLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: !Ref GwlbCrossZoneLbEnabled
      Name: !Join
        - "-"
        - - ZSCCGWLB
          - !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Type: gateway
Outputs:
  ZScalerCCGWLB:
    Description: ZS CC GWLB
    Value: !Ref ZSCCGWLB
  ZSCCVPCEPService:
    Description: ZSCCVPCEPService
    Value: !Ref ZSCCVPCEPService
  ZSCCVPCEP:
    Description: Use this VPC EP for route nexthops
    Value: !Ref ZSCCVPCEP
  CloudConnectorGWLBTemplateVersion:
    Description: Cloud Connector Template Version
    Value: 1.3.3
