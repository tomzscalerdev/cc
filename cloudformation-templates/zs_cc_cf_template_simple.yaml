AWSTemplateFormatVersion: 2010-09-09
Description: Zscaler Cloud Connector

Metadata:
  LICENSE: 'Apache License, Version 2.0'
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - AvailabilityZone
          - CCSubnetID
      - Label:
          default: Zscaler Cloud Connector Configuration
        Parameters:
          - ZscalerOSAMI
          - KeyPairName
          - CCInstanceType
          - InstanceType
          - CloudConnectorProvUrl
          - ZscalerSecretManagerSecretName
          - HttpProbePort
          - ZscalerEBSEncryptionEnabled
    ParameterLabels:
      InstanceType:
        default: Zscaler Cloud Connector AWS EC2 Instance Type
      CCInstanceType:
        default: Zscaler Cloud Connector Instance Size
      KeyPairName:
        default: Zscaler Cloud Connector Instance Key Pair
      ZscalerOSAMI:
        default: Zscaler product
      VPCID:
        default: Choose a VPC ID to Deploy Cloud Connector
      AvailabilityZone:
        default: Choose an Availability Zone to Deploy Cloud Connector
      CCSubnetID:
        default: Choose a Subnet ID to Deploy Cloud Connector
      CloudConnectorProvUrl:
        default: Cloud Connector Provisioning URL
      ZscalerSecretManagerSecretName:
        default: Secrets Manager Secret Name
      HttpProbePort:
        default: HTTP Monitor Probe Port
      ZscalerEBSEncryptionEnabled:
        default: EBS Encryption Enabled
  cfn-lint:
    config:
      ignore_checks:
        - E9007
        - W4001
        - W7001
        - W8001
        - E2507
        - E2522
        - E6002
        - E8002


Transform:
  - Name: ZSCC-Macro
    Parameters:
      operation : ZSCCSIMPLE

Parameters:
  InstanceType:
    AllowedValues:
      - t3.medium
      - t3a.medium
      - c5a.large
      - m5n.large
      - m6i.large
      - c6i.large
      - m5n.4xlarge
      - c5.4xlarge
      - m6i.4xlarge
      - c6i.4xlarge
    Default: m6i.large
    Description: The AWS EC2 instance type for the Cloud Connector instances
    Type: String
  CCInstanceType:
    AllowedValues:
      - small
      - medium
      - large
    Default: small
    Description: "The instance size for Zscaler Cloud Connector (small)"
    Type: String    
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Instance Access Key Pair
  VPCID:
    Description: 'The VPC ID where you want to deploy your Cloud Connector Instances'
    Type: 'AWS::EC2::VPC::Id'
  AvailabilityZone:
    Description: Choose an Availability Zone to Deploy Cloud Connector
    Type: 'AWS::EC2::AvailabilityZone::Name'
  CCSubnetID:
    Description: Must exist in the VPC and availability zone selected in the previous steps
    Type: 'AWS::EC2::Subnet::Id'
  CloudConnectorProvUrl:
    AllowedPattern: '(admin|connector).zs.*.net(/ec)?/w?api/v1/provUrl\?name=[\w-_]+'
    ConstraintDescription: >-
      Please input the Cloud Connector Provisioning Template URL to use from
      your Zscaler Cloud Connector Portal
    Description: Cloud Connector Provisioning URL
    Type: String
  ZscalerSecretManagerSecretName:
    Type: String
    Default: 'ZS/CC/credentials'
    Description: >-
      Secret Manager Secret Name, defaults to ZS/CC/credentials
  HttpProbePort:
    Type: String
    AllowedPattern: '^$|^(80|102[4-9]|10[3-9]\d|1[1-9]\d{2}|[2-9]\d{3}|[1-5]\d{4}|6[0-4]\d{3}|65[0-4]\d{2}|655[0-2]\d|6553[0-5])$'
    ConstraintDescription: >-
          The HTTP probe port's allowed values are [80, 1024-65535]
    Description: "HTTP Monitor probe port to listen on for monitoring probes. Allowed values are 80, 1024-65535. Defaults to 50000"
    Default: 50000
  ZscalerEBSEncryptionEnabled:
        Type: String
        Description: "Select \"true\" to enable EBS encryption (default), else \"false\""
        Default: true
        AllowedValues:
          - true
          - false

Conditions:
  SecretsManagerNameNotEmpty: !Not [!Equals [!Ref ZscalerSecretManagerSecretName, '']]
  HttpProbePortNotEmpty: !Not [!Equals [!Ref HttpProbePort, '']]
  CreateCCMediumServiceXfaces: !Or
    - !Equals [!Ref CCInstanceType, "medium"]
    - !Equals [!Ref CCInstanceType, "large"]
  CreateCCLargeServiceXfaces: !Equals [!Ref CCInstanceType, "large"]
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert:
          'Fn::EachMemberEquals':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - VpcId
            - !Ref VPCID
        AssertDescription: All subnets must exist in the selected VPC
      - Assert:
          'Fn::EachMemberEquals':
            - 'Fn::ValueOfAll':
                - 'AWS::EC2::Subnet::Id'
                - AvailabilityZone
            - !Ref AvailabilityZone
        AssertDescription: All subnets must exist in the selected AvailabilityZone
  smallCCInstanceType:
    RuleCondition: !Equals
      - !Ref CCInstanceType
      - small
    Assertions:
      - Assert:
          'Fn::Contains':
            - - t3.medium
              - t3a.medium
              - c5a.large
              - m5n.large
              - m6i.large
              - c6i.large
              - m5n.4xlarge
              - c5.4xlarge
              - m6i.4xlarge
              - c6i.4xlarge
            - !Ref InstanceType
        AssertDescription: >-
          For small CCInstanceType, the Instance type must be one of t3.medium, c5a.large, m5n.large, m6i.large, c6i.large, m5n.4xlarge, c5.4xlarge, m6i.4xlarge, c6i.4xlarge
  mediumCCInstanceType:
    RuleCondition: !Equals
      - !Ref CCInstanceType
      - medium
    Assertions:
      - Assert:
          'Fn::Contains':
            - - m5n.4xlarge
              - c5.4xlarge
              - m6i.4xlarge
              - c6i.4xlarge
            - !Ref InstanceType
        AssertDescription: >-
          For medium CCInstanceType, the Instance type must be one of c5.4xlarge, m5n.4xlarge, m6i.4xlarge, c6i.4xlarge
  largeCCInstanceType:
    RuleCondition: !Equals
      - !Ref CCInstanceType
      - large
    Assertions:
      - Assert:
          'Fn::Contains':
            - - m5n.4xlarge
              - c5.4xlarge
              - m6i.4xlarge
              - c6i.4xlarge
            - !Ref InstanceType
        AssertDescription: >-
          For large CCInstanceType, the Instance type must be one of c5.4xlarge, m5n.4xlarge, m6i.4xlarge, c6i.4xlarge
  CCProvUrlNotEmpty:
    Assertions:
      - Assert: !Not
          - !Equals
            - !Ref CloudConnectorProvUrl
            - ''
    AssertionDescription: Cloud Connector Provisioning URL cannot be empty!

Mappings:
  Product2Code:
    CloudConnector:
      Code: 2l8tfysndbav4tv2nfjwak3cu

Resources:
  MgmtSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable intra cloud comm
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Enable intra cloud comm
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
  MgmtXface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref CCSubnetID
      Description: Interface for management traffic
      GroupSet:
        - !Ref MgmtSecurityGroup
      SourceDestCheck: 'true'
      Tags:
        - Key: Network
          Value: !Sub '${AWS::StackName}-Management'
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudConnectorMgmtIF'
  ServiceXface:
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref CCSubnetID
      Description: Nexthop interface for traffic forwarding
      GroupSet:
        - !Ref ServiceSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Network
          Value: !Sub '${AWS::StackName}-ForwardingNexthop'
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudConnectorFwdNHIF'
  ServiceXface2:
    Condition: CreateCCMediumServiceXfaces
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref CCSubnetID
      Description: !Join
        - " "
        - - Interface for service 1 traffic for CC
          - !Ref CCInstanceType
          - Instance Type
      GroupSet:
        - !Ref ServiceSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Network
          Value: !Sub '${AWS::StackName}-Service1'
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudConnectorSrvcIF1'
  ServiceXface3:
    Condition: CreateCCMediumServiceXfaces
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref CCSubnetID
      Description: !Join
        - " "
        - - Interface for service 2 traffic for CC
          - !Ref CCInstanceType
          - Instance Type
      GroupSet:
        - !Ref ServiceSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Network
          Value: !Sub '${AWS::StackName}-Servic2'
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudConnectorSrvcIF2'
  ServiceXface4:
    Condition: CreateCCMediumServiceXfaces
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref CCSubnetID
      Description: !If
        - CreateCCLargeServiceXfaces
        - !Join [' ', ['Interface for service 3 traffic for CC', !Ref CCInstanceType, 'Instance Type']]
        - 'Interface for internal lb vip'
      GroupSet:
        - !Ref ServiceSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Network
          Value: !If
            - CreateCCLargeServiceXfaces
            - !Sub '${AWS::StackName}-Service3'
            - !Sub '${AWS::StackName}-InternalLbVip'
        - Key: Name
          Value: !If
            - CreateCCLargeServiceXfaces
            - !Sub '${AWS::StackName}-CloudConnectorSrvcIF3'
            - !Sub '${AWS::StackName}-CloudConnectorInternalLbVip'
  ServiceXface5:
    Condition: CreateCCLargeServiceXfaces
    Type: 'AWS::EC2::NetworkInterface'
    Properties:
      SubnetId: !Ref CCSubnetID
      Description: !Join
        - " "
        - - Interface for internal LB VIP
          - !Ref CCInstanceType
          - Instance Type
      GroupSet:
        - !Ref ServiceSecurityGroup
      SourceDestCheck: 'false'
      Tags:
        - Key: Network
          Value: !Sub '${AWS::StackName}-InternalLbVip'
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudConnectorInternalLbVip'

  CcGetSecretsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: Zscaler Cloud Connector Get Secrets Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'

  CcSsmControlPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: Zscaler Cloud Connector Ssm Control Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'ssm:UpdateInstanceInformation'
              - 'ssmmessages:CreateControlChannel'
              - 'ssmmessages:CreateDataChannel'
              - 'ssmmessages:OpenControlChannel'
              - 'ssmmessages:OpenDataChannel'
            Resource:
              - '*'

  CcIamRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: Zscaler Cloud Connector Instance IAM Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Ref CcGetSecretsPolicy
        - !Ref CcSsmControlPolicy


  CCHostProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref CcIamRole
  CCImdsv2LaunchTemplate:
    Type: 'AWS::EC2::LaunchTemplate'
    Properties:
      LaunchTemplateName: !Sub '${AWS::StackName}-CloudConnectorIMDSv2LaunchTemplate'
      LaunchTemplateData:
        MetadataOptions:
          HttpEndpoint: enabled
          HttpTokens: required
  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref CCHostProfile
      InstanceType: !Ref InstanceType
      LaunchTemplate:
        LaunchTemplateId: !Ref CCImdsv2LaunchTemplate
        Version: !GetAtt CCImdsv2LaunchTemplate.LatestVersionNumber
      EbsOptimized: "true"
      BlockDeviceMappings: 
      - DeviceName: "/dev/sda1"
        Ebs: 
          VolumeType: "gp3"
          DeleteOnTermination: "true"
          Encrypted: !Ref ZscalerEBSEncryptionEnabled
      Tags:
        - Key: Role
          Value: !Sub '${AWS::StackName}-ZSCCInstance'
        - Key: Name
          Value: !Sub '${AWS::StackName}-CloudConnector'
      UserData: !Base64
        'Fn::Join':
          - |+

          - - '[ZSCALER]'
            - !Join ['=', [ 'CC_URL', !Ref CloudConnectorProvUrl]]
            - !Join ['=', ['SECRET_NAME', !If [SecretsManagerNameNotEmpty, !Ref ZscalerSecretManagerSecretName, 'ZS/CC/credentials']]]
            - !Join ['=', ['HTTP_PROBE_PORT', !If [HttpProbePortNotEmpty, !Ref HttpProbePort, '50000']]]
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref 'ServiceXface'
          DeviceIndex: '0'
  MgmtNetworkInterfaceAttachment:
    Type: 'AWS::EC2::NetworkInterfaceAttachment'
    Properties:
      InstanceId:
        Ref: Ec2Instance
      NetworkInterfaceId:
        Ref: MgmtXface
      DeviceIndex: 1
      DeleteOnTermination: false
  SrvcNetworkInterface2Attachment:
    Condition: CreateCCMediumServiceXfaces
    Type: 'AWS::EC2::NetworkInterfaceAttachment'
    Properties:
      InstanceId:
        Ref: Ec2Instance
      NetworkInterfaceId:
        Ref: ServiceXface2
      DeviceIndex: 2
      DeleteOnTermination: false
  SrvcNetworkInterface3Attachment:
    Condition: CreateCCMediumServiceXfaces
    Type: 'AWS::EC2::NetworkInterfaceAttachment'
    Properties:
      InstanceId:
        Ref: Ec2Instance
      NetworkInterfaceId:
        Ref: ServiceXface3
      DeviceIndex: 3
      DeleteOnTermination: false
  SrvcNetworkInterface4Attachment:
    Condition: CreateCCMediumServiceXfaces
    Type: 'AWS::EC2::NetworkInterfaceAttachment'
    Properties:
      InstanceId:
        Ref: Ec2Instance
      NetworkInterfaceId:
        Ref: ServiceXface4
      DeviceIndex: 4
      DeleteOnTermination: false
  SrvcNetworkInterface5Attachment:
    Condition: CreateCCLargeServiceXfaces
    Type: 'AWS::EC2::NetworkInterfaceAttachment'
    Properties:
      InstanceId:
        Ref: Ec2Instance
      NetworkInterfaceId:
        Ref: ServiceXface5
      DeviceIndex: 5
      DeleteOnTermination: false
Outputs:
  FwdPrivateIP:
    Description: Zscaler Cloud Connector Instance Forwarding Private IP
    Value: !GetAtt
      - Ec2Instance
      - PrivateIp
    Export:
      Name: !Sub '${AWS::StackName}-FwdPrivateIP'
  MgmtPrivateIP:
    Description: Zscaler Cloud Connector Instance Mgmt Private IP
    Value: !GetAtt
      - MgmtXface
      - PrimaryPrivateIpAddress
    Export:
      Name: !Sub '${AWS::StackName}-MgmtPrivateIP'
  ServiceEni:
    Description: Zscaler Cloud Connector Instance Service ENI for traffic forwarding
    Value: !Ref ServiceXface
    Export:
      Name: !Sub '${AWS::StackName}-ServiceEni'
  ImageIdInUse:
    Description: AMI ID In use in the Zscaler Cloud Connector VM
  CloudConnectorTemplateVersion:
    Description: Cloud Connector Template Version
    Value: 1.0.0
